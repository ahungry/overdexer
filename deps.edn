{:deps {
        ;; General stuff
        org.clojure/clojure {:mvn/version "1.11.1"}
        org.clj-commons/gloss {:mvn/version "0.3.0"}
        org.clojure/java.jdbc {:mvn/version "0.7.12"}
        org.xerial/sqlite-jdbc {:mvn/version "3.39.3.0"}
        org.clojure/data.csv {:mvn/version "1.0.1"}
        ch.qos.logback/logback-classic {:mvn/version "1.4.3"}
        org.clojure/tools.logging {:mvn/version "1.1.0"}

        ;; API stuff
        org.clojure/data.json {:mvn/version "2.4.0"}
        ring/ring {:mvn/version "1.9.6"}
        compojure/compojure {:mvn/version "1.7.0"}

        ;; SPA Stuff
        com.bhauman/figwheel-main {:mvn/version "0.2.18"}
        re-frame/re-frame {:mvn/version "1.3.0"}
        org.clojure/core.async {:mvn/version "1.5.648"}
        cljs-http/cljs-http {:mvn/version "0.1.46"}
        }

 :paths ["src" "cljs-src" "resources" "target"]

 :aliases
 {:run-m {:main-opts ["-m" "ahungry.overdexer"]}
  :run-x {:ns-default ahungry.overdexer
          :exec-fn greet
          :exec-args {:name "Clojure"}}

  :build-dev {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}

  ;; https://figwheel.org/docs/compile_config.html
  ;; https://figwheel.org/docs/advanced_compile.html
  ;; TODO: Think how we want to set up a prod build/uberjar
  :build-prod {:main-opts ["-m" "figwheel.main" "-b" "prod" "-r"]}

  :build {:deps {io.github.seancorfield/build-clj
                 {:git/tag "v0.8.2" :git/sha "0ffdb4c"
                  ;; since we're building an app uberjar, we do not
                  ;; need deps-deploy for clojars.org deployment:
                  :deps/root "slim"}}
          :ns-default build}

  :env/dev {:extra-paths ["dev"]
            :main-opts ["-e" "(do (require 'user) (in-ns 'user))" "-r"]}

  :test {:extra-paths ["test"]
         :extra-deps {org.clojure/test.check {:mvn/version "1.1.1"}
                      io.github.cognitect-labs/test-runner
                      {:git/tag "v0.5.0" :git/sha "48c3c67"}}}}}
